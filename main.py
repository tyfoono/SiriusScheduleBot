import threading
from telebot import TeleBot, types
from datetime import date, timedelta, datetime
import time
import api

bot = TeleBot(TOKEN)

weekdays = {
    1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    2: "–í—Ç–æ—Ä–Ω–∏–∫",
    3: "–°—Ä–µ–¥–∞",
    4: "–ß–µ—Ç–≤–µ—Ä–≥",
    5: "–ü—è—Ç–Ω–∏—Ü–∞",
    6: "–°—É–±–±–æ—Ç–∞",
    7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}


def get_schedule_message(
    user_id: int, day: datetime.date, teacher_id: int | None = None
):
    if not teacher_id:
        group_info = api.get_user_group(int(user_id))

        if group_info is None:
            return (
                "–ì—Ä—É–ø–ø–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n"
                "/set_group –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n"
                "–ü—Ä–∏–º–µ—Ä: /set_group –ö1"
            )

        group_id = group_info[0]
        schedule = api.get_day_schedule(day, group_id, int(user_id))

        message_text = (
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {weekdays.get(day.isoweekday())} {day}\n\n" "–ó–∞–Ω—è—Ç–∏—è: \n\n"
        )

        if schedule.get("classes"):
            for i in range(len(schedule.get("classes"))):
                message_text += f"{i + 1}. {schedule.get("classes")[i]}\n\n"
        else:
            message_text += "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å\n\n"

        message_text += "\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: \n"

        if schedule.get("events"):
            for i in range(len(schedule.get("events"))):
                message_text += f"{i + 1}. {schedule.get("events")[i]}\n\n"
        else:
            message_text += "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å"

    else:
        schedule = api.get_teacher_day(day, teacher_id)

        message_text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {weekdays.get(day.isoweekday())} {day}:\n\n"

        if schedule:
            for i in range(len(schedule)):
                message_text += f"{i + 1}. {schedule[i]:teacher}\n\n"
        else:
            message_text += "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å\n\n"

    return message_text


def help_universal(user_id):
    message_text = (
        "–ö–æ–º–∞–Ω–¥–∞ /today –≤—ã–≤–æ–¥–∏—Ç –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /tomorrow - –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /add –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∞—Ç–∞ –≤—Ä–µ–º—è - –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ. \n"
        "–ö–æ–º–∞–Ω–¥–∞ /schedule - –ø–æ–º–æ—â—å –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /set_group –Ω–∞–∑–≤–∞–Ω–∏–µ-–≥—Ä—É–ø–ø—ã - –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /search_teacher —Ñ–∞–º–∏–ª–∏—è - –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."
    )
    bot.send_message(user_id, message_text)


@bot.message_handler(commands=["help"])
def help_command_handler(message):
    help_universal(message.from_user.id)


@bot.callback_query_handler(func=lambda call: call.data == "help")
def help_callback_handler(call):
    help_universal(call.message.chat.id)


@bot.message_handler(commands=["start"])
def start_handler(message):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    markup.add(button)
    bot.send_message(
        message.from_user.id,
        f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "/set_group –Ω–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
        reply_markup=markup,
    )


@bot.message_handler(commands=["set_group"])
def set_group_handler(message):
    try:
        group_name = message.text.split(maxsplit=1)[1].strip()
        user_id = message.from_user.id

        group_id = api.get_group_id(group_name)

        if group_id is None:
            bot.send_message(
                user_id,
                f"–ì—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            )
            return

        current_group = api.get_user_group(user_id)

        if current_group:
            api.update_user_group(user_id, group_id)
            response = f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{group_name}'!"
        else:
            api.set_user_group(user_id, group_id)
            response = f"–ì—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"

        bot.send_message(user_id, response)

    except IndexError:
        bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–§–æ—Ä–º–∞—Ç: /set_group –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n"
            "–ü—Ä–∏–º–µ—Ä: /set_group –ö1",
        )
    except Exception as e:
        print(f"Error setting group: {e}")
        bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


@bot.message_handler(commands=["schedule"])
def schedule_handler(message):
    message_text = (
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /add –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/add –Ω–∞–∑–≤–∞–Ω–∏–µ(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤) –¥–∞—Ç–∞(–≥–≥–≥–≥-–º–º-–¥–¥) –≤—Ä–µ–º—è(—á—á::–º–º)"
    )
    bot.send_message(message.from_user.id, message_text)


@bot.message_handler(commands=["add"])
def add_handler(message):
    try:
        args = message.text.split(maxsplit=3)[1:]
        if len(args) < 3:
            raise ValueError("Invalid arguments")

        title = args[0]
        date_str = args[1]
        time_str = args[2]

        time_obj = datetime.strptime(time_str, "%H:%M").time()
        time_formatted = time_obj.strftime("%H:%M")

        event_date = date.fromisoformat(date_str)
        reminder_date = event_date - timedelta(days=1)

        event = api.add_event(
            message.from_user.id,
            title,
            date_str,
            time_formatted,
            reminder_date.isoformat(),
        )

        response = (
            "–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n"
            f"{event}\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –¥–æ —Å–æ–±—ã—Ç–∏—è!"
        )

    except Exception as e:
        response = (
            "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è\n"
            "–§–æ—Ä–º–∞—Ç: /add –Ω–∞–∑–≤–∞–Ω–∏–µ(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤) –¥–∞—Ç–∞(–≥–≥–≥–≥-–º–º-–¥–¥) –≤—Ä–µ–º—è(—á—á:–º–º)\n"
            "–ü—Ä–∏–º–µ—Ä: /add –≠–∫–∑–∞–º–µ–Ω-–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 2025-06-15 14:30"
        )
        print(f"Error: {e}")

    bot.send_message(message.from_user.id, response)


@bot.message_handler(commands=["today"])
def today_handler(message):
    user_id = message.from_user.id
    day = datetime.today().date()
    message_text = get_schedule_message(user_id, day)
    bot.send_message(user_id, message_text)


@bot.message_handler(commands=["tomorrow"])
def tomorrow_handler(message):
    user_id = message.from_user.id
    day = datetime.today().date() + timedelta(days=1)
    message_text = get_schedule_message(user_id, day)
    bot.send_message(user_id, message_text)


@bot.message_handler(commands=["search_teacher"])
def search_teacher_handle(message):
    try:
        teacher_name = message.text.split(maxsplit=1)[1].strip()
        user_id = message.from_user.id

        teacher_id = api.get_teacher_id(teacher_name.lower())

        if teacher_id is None:
            bot.send_message(
                user_id,
                f"–£—á–∏—Ç–µ–ª—å —Å —Ñ–∞–º–∏–ª–∏–µ–π {teacher_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            )
            return

        day = datetime.today().date()
        message_text = get_schedule_message(user_id, day, teacher_id)

        bot.send_message(user_id, message_text)

    except IndexError:
        bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã.\n"
            "–§–æ—Ä–º–∞—Ç: /search_teacher —Ñ–∞–º–∏–ª–∏—è\n"
            "–ü—Ä–∏–º–µ—Ä: /search_teacher –ò–≤–∞–Ω–æ–≤",
        )
    except Exception as e:
        print(f"Error setting group: {e}")
        bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


def reminder_scheduler():
    """Background task to check and send reminders"""
    while True:
        try:
            due_reminders = api.get_due_reminders()
            for event_id, user_id, title in due_reminders:
                try:
                    bot.send_message(
                        user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {title}\n" "–°–æ–±—ã—Ç–∏–µ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è!"
                    )
                    api.mark_reminder_sent(event_id)
                except Exception as e:
                    print(f"Reminder failed for user {user_id}: {e}")
        except Exception as e:
            print(f"Reminder scheduler error: {e}")

        time.sleep(60)


threading.Thread(target=reminder_scheduler, daemon=True).start()

bot.polling(non_stop=True)
