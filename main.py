TOKEN = "7554954438:AAEBbAjiHkkRPDDTwc9pzkw2Pn3skF1PreU"

import threading
from telebot import TeleBot, types
from datetime import date, timedelta, datetime
import time
import api

bot = TeleBot(TOKEN)


def help_universal(user_id):
    message_text = (
        "–ö–æ–º–∞–Ω–¥–∞ /today –≤—ã–≤–æ–¥–∏—Ç –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.\n"
        + "–ö–æ–º–∞–Ω–¥–∞ /tomorrow ‚Äî –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n"
        + "–ö–æ–º–∞–Ω–¥–∞ /week ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.\n"
        + "–ö–æ–º–∞–Ω–¥–∞ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ. \n"
        + "–ö–æ–º–∞–Ω–¥–∞ /schedule - –ø–æ–º–æ—â—å –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.\n"
        + "–ö–æ–º–∞–Ω–¥–∞ /set_group - –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.\n"
        + "–ö–æ–º–∞–Ω–¥–∞ /set_teacher - –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."
    )
    bot.send_message(user_id, message_text)


@bot.message_handler(commands=["help"])
def help_command_handler(message):
    help_universal(message.from_user.id)


@bot.callback_query_handler(func=lambda call: call.data == "help")
def help_callback_handler(call):
    help_universal(call.message.chat.id)


@bot.message_handler(commands=["start"])
def start_command_handler(message):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    markup.add(button)
    bot.send_message(
        message.from_user.id,
        f"–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–µ—Ä–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥.",
        reply_markup=markup,
    )


@bot.message_handler(commands=["schedule"])
def schedule_command_handler(message):
    message_text = (
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /add –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/add –Ω–∞–∑–≤–∞–Ω–∏–µ(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤) –¥–∞—Ç–∞(–≥–≥–≥–≥-–º–º-–¥–¥) –≤—Ä–µ–º—è(—á—á::–º–º)"
    )
    bot.send_message(message.from_user.id, message_text)


@bot.message_handler(commands=["add"])
def add_command_handler(message):
    try:
        args = message.text.split(maxsplit=3)[1:]
        if len(args) < 3:
            raise ValueError("Invalid arguments")
        
        title = args[0]
        date_str = args[1]
        time_str = args[2]
        
        time_obj = datetime.strptime(time_str, "%H:%M").time()
        time_formatted = time_obj.strftime("%H:%M")
        
        event_date = date.fromisoformat(date_str)
        reminder_date = event_date - timedelta(days=1)
        
        event = api.add_event(
            message.from_user.id,
            title,
            date_str,
            time_formatted,
            reminder_date.isoformat()
        )
        
        response = (
            "–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n"
            f"{event}\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –¥–æ —Å–æ–±—ã—Ç–∏—è!"
        )
        
    except Exception as e:
        response = (
            "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è\n"
            "–§–æ—Ä–º–∞—Ç: /add –Ω–∞–∑–≤–∞–Ω–∏–µ(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤) –¥–∞—Ç–∞(–≥–≥–≥–≥-–º–º-–¥–¥) –≤—Ä–µ–º—è(—á—á:–º–º)\n"
            "–ü—Ä–∏–º–µ—Ä: /add –≠–∫–∑–∞–º–µ–Ω-–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 2025-06-15 14:30"
        )
        print(f"Error: {e}")
    
    bot.send_message(message.from_user.id, response)

def reminder_scheduler():
    """Background task to check and send reminders"""
    while True:
        try:
            due_reminders = api.get_due_reminders()
            for event_id, user_id, title in due_reminders:
                try:
                    bot.send_message(
                        user_id,
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {title}\n"
                        "–°–æ–±—ã—Ç–∏–µ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è!"
                    )
                    api.mark_reminder_sent(event_id)
                except Exception as e:
                    print(f"Reminder failed for user {user_id}: {e}")
        except Exception as e:
            print(f"Reminder scheduler error: {e}")
        
        time.sleep(60)

threading.Thread(
    target=reminder_scheduler,
    daemon=True
).start()

bot.polling(non_stop=True)
